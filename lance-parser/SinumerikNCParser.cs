//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from ..\..\antlr4-grammar\SinumerikNC.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class SinumerikNCParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, DEFINE=2, TOOL_OFFSET_LENGTH_RADIUS=3, TOOL_OFFSET_LENGTH=4, TOOL_OFFSET_RADIUS=5, 
		SET_MASTER_SPINDLE=6, GRINDING_WHEEL_PERIPHERAL_SPEED_ON=7, GRINDING_WHEEL_PERIPHERAL_SPEED_OFF=8, 
		FEED_GROUP=9, FEED_GROUP_EFFECTIVE_RADIUS=10, WAIT_FOR_POSITION=11, WAIT_FOR_MARKER=12, 
		WAIT_FOR_SPINDLE=13, SPINDLE_POSITION_CONTROL_MODE_ON=14, SPINDLE_POSITION_CONTROL_MODE_OFF=15, 
		SPINDLE_POSITIONING_IMMEDIATE=16, MOTION_END_FINE=17, MOTION_END_COARSE=18, 
		MOTION_END_INTERPOLATION=19, MOTION_END_INTERPOLATION_BREAK=20, FEEDRATE_PATH_ROTARY_AXIS_ON=21, 
		FEEDRATE_PATH_ROTARY_AXIS_OFF=22, FEEDRATE_OVERRIDE_RAPID_TRAVERSE_VELOCITY=23, 
		TOOL_CORRECTION_SUPPRESSION=24, TOOL_OFFSET=25, MASTER_SPINDLE_SPEED_LIMIT=26, 
		POSITIONING_IN_SECTIONS=27, POSITIONING_IMMEDIATE=28, SPINDLE_POSITIONING_DELAYED=29, 
		FEEDRATE_OVERRIDE_POSITION_OR_SPINDLE=30, TOOL_CUTTING_SPEED=31, DEF=32, 
		ABSOLUTE_COORDINATE_NEGATIVE=33, ABSOLUTE_COORDINATE_POSITIVE=34, POSITIONING_DELAYED=35, 
		CONSTANT_CUTTING_RATE_REFERENCE_AXIS=36, FEEDRATE_PATH_ROTARY_AXIS=37, 
		SPINDLE_IDENTIFIER=38, FEEDRATE_OVERRIDE_PATH=39, ACCELERATION_COMPENSATION=40, 
		FEEDRATE_OVERRIDE_AXIAL_HANDWHEEL=41, AS=42, FEEDRATE_LIMIT=43, FEEDRATE_POSITION_AXIS=44, 
		ABSOLUTE_COORDINATE=45, INCREMENTAL_COORDINATE=46, DIRECT_APPROACH_COORDINATE=47, 
		FEEDRATE_OVERRIDE_PATH_HANDWHEEL=48, BLOCK_NUMBER=49, ADDITIONAL_FUNCTION=50, 
		AUXILIARY_FUNCTION=51, PREPARATORY_FUNCTION=52, X_AXIS=53, Y_AXIS=54, 
		Z_AXIS=55, A_AXIS=56, B_AXIS=57, C_AXIS=58, SPINDLE=59, FEEDRATE=60, TOOL=61, 
		TOOL_CORRECTION=62, BOOL_TYPE=63, CHAR_TYPE=64, INT_TYPE=65, REAL_TYPE=66, 
		STRING_TYPE=67, AXIS_TYPE=68, FRAME_TYPE=69, OPEN_PAREN=70, CLOSE_PAREN=71, 
		OPEN_BRACKET=72, CLOSE_BRACKET=73, LESS=74, LESS_EQUAL=75, GREATER=76, 
		GREATER_EQUAL=77, NOT_EQUAL=78, LEFT_SHIFT=79, RIGHT_SHIFT=80, PLUS=81, 
		PLUS_PLUS=82, MINUS=83, MINUS_MINUS=84, MUL=85, DIV=86, MOD=87, DOLLAR=88, 
		RESERVED=89, PROGRAM_NAME_SIMPLE=90, PROGRAM_NAME_EXTENDED=91, INT=92, 
		WHITESPACE=93, NAME=94, SKIP_BLOCK=95, NEWLINE=96, COMMENT=97;
	public const int
		RULE_file = 0, RULE_feedrate_override_path = 1, RULE_feedrate_override_rapid_traverse_velocity = 2, 
		RULE_feedrate_override_position_or_spindle = 3, RULE_acceleration_compensation = 4, 
		RULE_feedrate_override_path_handwheel = 5, RULE_feedrate_override_axial_handwheel = 6, 
		RULE_axis_spindle_identifier = 7, RULE_axis_identifier = 8, RULE_spindle_identifier = 9, 
		RULE_axis = 10;
	public static readonly string[] ruleNames = {
		"file", "feedrate_override_path", "feedrate_override_rapid_traverse_velocity", 
		"feedrate_override_position_or_spindle", "acceleration_compensation", 
		"feedrate_override_path_handwheel", "feedrate_override_axial_handwheel", 
		"axis_spindle_identifier", "axis_identifier", "spindle_identifier", "axis"
	};

	private static readonly string[] _LiteralNames = {
		null, "'='", null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "'('", "')'", 
		"'['", "']'", "'<'", "'<='", "'>'", "'>='", "'<>'", "'<<'", "'>>'", "'+'", 
		"'++'", "'-'", "'--'", "'*'", "'/'", "'%'", "'$'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "DEFINE", "TOOL_OFFSET_LENGTH_RADIUS", "TOOL_OFFSET_LENGTH", 
		"TOOL_OFFSET_RADIUS", "SET_MASTER_SPINDLE", "GRINDING_WHEEL_PERIPHERAL_SPEED_ON", 
		"GRINDING_WHEEL_PERIPHERAL_SPEED_OFF", "FEED_GROUP", "FEED_GROUP_EFFECTIVE_RADIUS", 
		"WAIT_FOR_POSITION", "WAIT_FOR_MARKER", "WAIT_FOR_SPINDLE", "SPINDLE_POSITION_CONTROL_MODE_ON", 
		"SPINDLE_POSITION_CONTROL_MODE_OFF", "SPINDLE_POSITIONING_IMMEDIATE", 
		"MOTION_END_FINE", "MOTION_END_COARSE", "MOTION_END_INTERPOLATION", "MOTION_END_INTERPOLATION_BREAK", 
		"FEEDRATE_PATH_ROTARY_AXIS_ON", "FEEDRATE_PATH_ROTARY_AXIS_OFF", "FEEDRATE_OVERRIDE_RAPID_TRAVERSE_VELOCITY", 
		"TOOL_CORRECTION_SUPPRESSION", "TOOL_OFFSET", "MASTER_SPINDLE_SPEED_LIMIT", 
		"POSITIONING_IN_SECTIONS", "POSITIONING_IMMEDIATE", "SPINDLE_POSITIONING_DELAYED", 
		"FEEDRATE_OVERRIDE_POSITION_OR_SPINDLE", "TOOL_CUTTING_SPEED", "DEF", 
		"ABSOLUTE_COORDINATE_NEGATIVE", "ABSOLUTE_COORDINATE_POSITIVE", "POSITIONING_DELAYED", 
		"CONSTANT_CUTTING_RATE_REFERENCE_AXIS", "FEEDRATE_PATH_ROTARY_AXIS", "SPINDLE_IDENTIFIER", 
		"FEEDRATE_OVERRIDE_PATH", "ACCELERATION_COMPENSATION", "FEEDRATE_OVERRIDE_AXIAL_HANDWHEEL", 
		"AS", "FEEDRATE_LIMIT", "FEEDRATE_POSITION_AXIS", "ABSOLUTE_COORDINATE", 
		"INCREMENTAL_COORDINATE", "DIRECT_APPROACH_COORDINATE", "FEEDRATE_OVERRIDE_PATH_HANDWHEEL", 
		"BLOCK_NUMBER", "ADDITIONAL_FUNCTION", "AUXILIARY_FUNCTION", "PREPARATORY_FUNCTION", 
		"X_AXIS", "Y_AXIS", "Z_AXIS", "A_AXIS", "B_AXIS", "C_AXIS", "SPINDLE", 
		"FEEDRATE", "TOOL", "TOOL_CORRECTION", "BOOL_TYPE", "CHAR_TYPE", "INT_TYPE", 
		"REAL_TYPE", "STRING_TYPE", "AXIS_TYPE", "FRAME_TYPE", "OPEN_PAREN", "CLOSE_PAREN", 
		"OPEN_BRACKET", "CLOSE_BRACKET", "LESS", "LESS_EQUAL", "GREATER", "GREATER_EQUAL", 
		"NOT_EQUAL", "LEFT_SHIFT", "RIGHT_SHIFT", "PLUS", "PLUS_PLUS", "MINUS", 
		"MINUS_MINUS", "MUL", "DIV", "MOD", "DOLLAR", "RESERVED", "PROGRAM_NAME_SIMPLE", 
		"PROGRAM_NAME_EXTENDED", "INT", "WHITESPACE", "NAME", "SKIP_BLOCK", "NEWLINE", 
		"COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SinumerikNC.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SinumerikNCParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public SinumerikNCParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public SinumerikNCParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class FileContext : ParserRuleContext {
		public FileContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_file; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterFile(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitFile(this);
		}
	}

	[RuleVersion(0)]
	public FileContext file() {
		FileContext _localctx = new FileContext(Context, State);
		EnterRule(_localctx, 0, RULE_file);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Feedrate_override_pathContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEEDRATE_OVERRIDE_PATH() { return GetToken(SinumerikNCParser.FEEDRATE_OVERRIDE_PATH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SinumerikNCParser.INT, 0); }
		public Feedrate_override_pathContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feedrate_override_path; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterFeedrate_override_path(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitFeedrate_override_path(this);
		}
	}

	[RuleVersion(0)]
	public Feedrate_override_pathContext feedrate_override_path() {
		Feedrate_override_pathContext _localctx = new Feedrate_override_pathContext(Context, State);
		EnterRule(_localctx, 2, RULE_feedrate_override_path);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(FEEDRATE_OVERRIDE_PATH);
			State = 25;
			Match(T__0);
			State = 26;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Feedrate_override_rapid_traverse_velocityContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEEDRATE_OVERRIDE_RAPID_TRAVERSE_VELOCITY() { return GetToken(SinumerikNCParser.FEEDRATE_OVERRIDE_RAPID_TRAVERSE_VELOCITY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SinumerikNCParser.INT, 0); }
		public Feedrate_override_rapid_traverse_velocityContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feedrate_override_rapid_traverse_velocity; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterFeedrate_override_rapid_traverse_velocity(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitFeedrate_override_rapid_traverse_velocity(this);
		}
	}

	[RuleVersion(0)]
	public Feedrate_override_rapid_traverse_velocityContext feedrate_override_rapid_traverse_velocity() {
		Feedrate_override_rapid_traverse_velocityContext _localctx = new Feedrate_override_rapid_traverse_velocityContext(Context, State);
		EnterRule(_localctx, 4, RULE_feedrate_override_rapid_traverse_velocity);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 28;
			Match(FEEDRATE_OVERRIDE_RAPID_TRAVERSE_VELOCITY);
			State = 29;
			Match(T__0);
			State = 30;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Feedrate_override_position_or_spindleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEEDRATE_OVERRIDE_POSITION_OR_SPINDLE() { return GetToken(SinumerikNCParser.FEEDRATE_OVERRIDE_POSITION_OR_SPINDLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SinumerikNCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Axis_spindle_identifierContext axis_spindle_identifier() {
			return GetRuleContext<Axis_spindle_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SinumerikNCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SinumerikNCParser.INT, 0); }
		public Feedrate_override_position_or_spindleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feedrate_override_position_or_spindle; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterFeedrate_override_position_or_spindle(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitFeedrate_override_position_or_spindle(this);
		}
	}

	[RuleVersion(0)]
	public Feedrate_override_position_or_spindleContext feedrate_override_position_or_spindle() {
		Feedrate_override_position_or_spindleContext _localctx = new Feedrate_override_position_or_spindleContext(Context, State);
		EnterRule(_localctx, 6, RULE_feedrate_override_position_or_spindle);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			Match(FEEDRATE_OVERRIDE_POSITION_OR_SPINDLE);
			State = 33;
			Match(OPEN_BRACKET);
			State = 34;
			axis_spindle_identifier();
			State = 35;
			Match(CLOSE_BRACKET);
			State = 36;
			Match(T__0);
			State = 37;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Acceleration_compensationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ACCELERATION_COMPENSATION() { return GetToken(SinumerikNCParser.ACCELERATION_COMPENSATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SinumerikNCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Axis_spindle_identifierContext axis_spindle_identifier() {
			return GetRuleContext<Axis_spindle_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SinumerikNCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SinumerikNCParser.INT, 0); }
		public Acceleration_compensationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_acceleration_compensation; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterAcceleration_compensation(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitAcceleration_compensation(this);
		}
	}

	[RuleVersion(0)]
	public Acceleration_compensationContext acceleration_compensation() {
		Acceleration_compensationContext _localctx = new Acceleration_compensationContext(Context, State);
		EnterRule(_localctx, 8, RULE_acceleration_compensation);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 39;
			Match(ACCELERATION_COMPENSATION);
			State = 40;
			Match(OPEN_BRACKET);
			State = 41;
			axis_spindle_identifier();
			State = 42;
			Match(CLOSE_BRACKET);
			State = 43;
			Match(T__0);
			State = 44;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Feedrate_override_path_handwheelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEEDRATE_OVERRIDE_PATH_HANDWHEEL() { return GetToken(SinumerikNCParser.FEEDRATE_OVERRIDE_PATH_HANDWHEEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SinumerikNCParser.INT, 0); }
		public Feedrate_override_path_handwheelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feedrate_override_path_handwheel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterFeedrate_override_path_handwheel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitFeedrate_override_path_handwheel(this);
		}
	}

	[RuleVersion(0)]
	public Feedrate_override_path_handwheelContext feedrate_override_path_handwheel() {
		Feedrate_override_path_handwheelContext _localctx = new Feedrate_override_path_handwheelContext(Context, State);
		EnterRule(_localctx, 10, RULE_feedrate_override_path_handwheel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 46;
			Match(FEEDRATE_OVERRIDE_PATH_HANDWHEEL);
			State = 47;
			Match(T__0);
			State = 48;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Feedrate_override_axial_handwheelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FEEDRATE_OVERRIDE_AXIAL_HANDWHEEL() { return GetToken(SinumerikNCParser.FEEDRATE_OVERRIDE_AXIAL_HANDWHEEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_BRACKET() { return GetToken(SinumerikNCParser.OPEN_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Axis_identifierContext axis_identifier() {
			return GetRuleContext<Axis_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_BRACKET() { return GetToken(SinumerikNCParser.CLOSE_BRACKET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SinumerikNCParser.INT, 0); }
		public Feedrate_override_axial_handwheelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_feedrate_override_axial_handwheel; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterFeedrate_override_axial_handwheel(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitFeedrate_override_axial_handwheel(this);
		}
	}

	[RuleVersion(0)]
	public Feedrate_override_axial_handwheelContext feedrate_override_axial_handwheel() {
		Feedrate_override_axial_handwheelContext _localctx = new Feedrate_override_axial_handwheelContext(Context, State);
		EnterRule(_localctx, 12, RULE_feedrate_override_axial_handwheel);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50;
			Match(FEEDRATE_OVERRIDE_AXIAL_HANDWHEEL);
			State = 51;
			Match(OPEN_BRACKET);
			State = 52;
			axis_identifier();
			State = 53;
			Match(CLOSE_BRACKET);
			State = 54;
			Match(T__0);
			State = 55;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Axis_spindle_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Axis_identifierContext axis_identifier() {
			return GetRuleContext<Axis_identifierContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Spindle_identifierContext spindle_identifier() {
			return GetRuleContext<Spindle_identifierContext>(0);
		}
		public Axis_spindle_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axis_spindle_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterAxis_spindle_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitAxis_spindle_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Axis_spindle_identifierContext axis_spindle_identifier() {
		Axis_spindle_identifierContext _localctx = new Axis_spindle_identifierContext(Context, State);
		EnterRule(_localctx, 14, RULE_axis_spindle_identifier);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case X_AXIS:
			case Y_AXIS:
			case Z_AXIS:
			case A_AXIS:
			case B_AXIS:
			case C_AXIS:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				axis_identifier();
				}
				break;
			case SPINDLE_IDENTIFIER:
			case SPINDLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 58;
				spindle_identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Axis_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AxisContext axis() {
			return GetRuleContext<AxisContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SinumerikNCParser.INT, 0); }
		public Axis_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axis_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterAxis_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitAxis_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Axis_identifierContext axis_identifier() {
		Axis_identifierContext _localctx = new Axis_identifierContext(Context, State);
		EnterRule(_localctx, 16, RULE_axis_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			axis();
			State = 62;
			Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Spindle_identifierContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPINDLE_IDENTIFIER() { return GetToken(SinumerikNCParser.SPINDLE_IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPEN_PAREN() { return GetToken(SinumerikNCParser.OPEN_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(SinumerikNCParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CLOSE_PAREN() { return GetToken(SinumerikNCParser.CLOSE_PAREN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SPINDLE() { return GetToken(SinumerikNCParser.SPINDLE, 0); }
		public Spindle_identifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_spindle_identifier; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterSpindle_identifier(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitSpindle_identifier(this);
		}
	}

	[RuleVersion(0)]
	public Spindle_identifierContext spindle_identifier() {
		Spindle_identifierContext _localctx = new Spindle_identifierContext(Context, State);
		EnterRule(_localctx, 18, RULE_spindle_identifier);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SPINDLE_IDENTIFIER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				Match(SPINDLE_IDENTIFIER);
				State = 65;
				Match(OPEN_PAREN);
				State = 66;
				Match(INT);
				State = 67;
				Match(CLOSE_PAREN);
				}
				break;
			case SPINDLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				Match(SPINDLE);
				State = 69;
				Match(INT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AxisContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode A_AXIS() { return GetToken(SinumerikNCParser.A_AXIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode B_AXIS() { return GetToken(SinumerikNCParser.B_AXIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode C_AXIS() { return GetToken(SinumerikNCParser.C_AXIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode X_AXIS() { return GetToken(SinumerikNCParser.X_AXIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Y_AXIS() { return GetToken(SinumerikNCParser.Y_AXIS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Z_AXIS() { return GetToken(SinumerikNCParser.Z_AXIS, 0); }
		public AxisContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_axis; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.EnterAxis(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			ISinumerikNCListener typedListener = listener as ISinumerikNCListener;
			if (typedListener != null) typedListener.ExitAxis(this);
		}
	}

	[RuleVersion(0)]
	public AxisContext axis() {
		AxisContext _localctx = new AxisContext(Context, State);
		EnterRule(_localctx, 20, RULE_axis);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 72;
			_la = TokenStream.LA(1);
			if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 567453553048682496L) != 0) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,97,75,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,
		1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
		5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,3,7,60,8,7,1,8,1,8,1,8,1,9,1,9,1,
		9,1,9,1,9,1,9,3,9,71,8,9,1,10,1,10,1,10,0,0,11,0,2,4,6,8,10,12,14,16,18,
		20,0,1,1,0,53,58,65,0,22,1,0,0,0,2,24,1,0,0,0,4,28,1,0,0,0,6,32,1,0,0,
		0,8,39,1,0,0,0,10,46,1,0,0,0,12,50,1,0,0,0,14,59,1,0,0,0,16,61,1,0,0,0,
		18,70,1,0,0,0,20,72,1,0,0,0,22,23,1,0,0,0,23,1,1,0,0,0,24,25,5,39,0,0,
		25,26,5,1,0,0,26,27,5,92,0,0,27,3,1,0,0,0,28,29,5,23,0,0,29,30,5,1,0,0,
		30,31,5,92,0,0,31,5,1,0,0,0,32,33,5,30,0,0,33,34,5,72,0,0,34,35,3,14,7,
		0,35,36,5,73,0,0,36,37,5,1,0,0,37,38,5,92,0,0,38,7,1,0,0,0,39,40,5,40,
		0,0,40,41,5,72,0,0,41,42,3,14,7,0,42,43,5,73,0,0,43,44,5,1,0,0,44,45,5,
		92,0,0,45,9,1,0,0,0,46,47,5,48,0,0,47,48,5,1,0,0,48,49,5,92,0,0,49,11,
		1,0,0,0,50,51,5,41,0,0,51,52,5,72,0,0,52,53,3,16,8,0,53,54,5,73,0,0,54,
		55,5,1,0,0,55,56,5,92,0,0,56,13,1,0,0,0,57,60,3,16,8,0,58,60,3,18,9,0,
		59,57,1,0,0,0,59,58,1,0,0,0,60,15,1,0,0,0,61,62,3,20,10,0,62,63,5,92,0,
		0,63,17,1,0,0,0,64,65,5,38,0,0,65,66,5,70,0,0,66,67,5,92,0,0,67,71,5,71,
		0,0,68,69,5,59,0,0,69,71,5,92,0,0,70,64,1,0,0,0,70,68,1,0,0,0,71,19,1,
		0,0,0,72,73,7,0,0,0,73,21,1,0,0,0,2,59,70
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
