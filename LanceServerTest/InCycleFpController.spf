;#{! \ingroup WpdCameleon
;# @{
;# @file
;#   InCycleFpController.spf
;#
;# @authors
;#   07/2021 BLeicht - initial
;#
;#}

;{! NC-header
;  @copyright
;    Copyright (c)The Gleason Works and Gleason Pfauter
;    Maschinenfabrik GmbH. All Rights Reserved.
;    No portion of this material may be reproduced or disclosed in any
;    manner without written permission from:
;
;      The Gleason Works
;      1000 University Avenue
;      P.O. Box 22970
;      Rochester
;      New York 14692-2970.
;
;  @brief
;    Controller for "in cycle first part" state machine
;    1. Set order for first part action
;    2. Trigger the first part action by setting the related GUDs
;}

proc InCycleFpController(var bool pStart)

define _debugMode as true

def int _fileError, _actionCount, _seq, _job = -1, _countSelected = -1, _startSelected = -1, _endSelected = -1, _startNotSelected = -1, _endNotSelected = -1
def bool _noJob, _jobEmpty, _jobFinished, _jobChamfered, _reset, _cutsDone, _restart, _stationIsUsed[mComStationCount]
def bool _unmachinedInHobStation, _unchamferedInHobStation, _hobbedInHobStation, _newPartToHobStation
def bool _unmachinedInApcStation, _unchamferedInApcStation, _hobbedInApcStation, _newPartToApcStation
def string[50] _order, _lastAction
def string[200] _error, _response
def string[24] _warmupCycle

define _unclampPartInHobStation     as "Unclamp_Part_In_HobStation"
define _previousUnclampHobStation   as "Previous_Unclamp_HobStation"
define _previousUnclampFirstStation as "Previous_Unclamp_FirstStation"
define _unclampPartInApcStation     as "Unclamp_Part_In_ApcStation"
define _previousUnclampApcStation   as "Previous_Unclamp_ApcStation"
define _previousUnclampLastStation  as "Previous_Unclamp_LastStation"
define _autoLoadToHobStation        as "AutoLoad_to_HobStation"
define _autoLoadToApcStation        as "AutoLoad_to_ApcStation"
define _clampAndHobCut              as "Clamp_and_HobCut"
define _clampAndApcCut              as "Clamp_and_ApcCut"
define _repeatHobCut                as "Repeat_HobCut"
define _repeatApcCut                as "Repeat_ApcCut"
define _nextHobCut                  as "Next_HobCut"
define _nextApcCut                  as "Next_ApcCut"
define _sendToSpc                   as "Send_to_SPC"
define _sendToNotOK                 as "Send_to_NotOK"
define _beginProduction             as "Begin_Production"
define _exitFirstPart               as "Exit_FirstPart"
define _startWarmUp                 as "Start_WarmUp"

define _noWorkflow                  as "No_Workflow"
define _empty                       as ""
define _oderListFileName            as "InCycleFpOrderList"
define _mWarmupStartCycle           as "InCycleFpWarmupStartCh"
define _mWarmupEndCycle             as "InCycleFpWarmupEndCh"
define _dayTimeInfo                 as $A_DAY<<"."<<$A_MONTH<<"."<<$A_YEAR<<"   "<<$A_HOUR<<":"<<$A_MINUTE<<":"<<$A_SECOND

extern DocketGetJobState4(int, var bool, var bool, var bool, var bool, var bool, var bool, var bool)
extern DocketGetSequenceSelect(int, var int, var int, var int, var int , var int, var int)
extern PromptToMeasureFp(string[24], var string[200])
extern DocketGetUsedStation(var bool[])

if pStart
    if _debugMode
        delete(_fileError, _oderListFileName)
        write(_fileError, _oderListFileName, "In Cycle First Part started at: " <<_dayTimeInfo)
    endif
    gComInCycleFpLastAction = _empty
    gComInCycleFpStartOrder = _empty
endif

_lastAction = gComInCycleFpLastAction
_order = _empty
_warmupCycle = _empty

;##############################################################
;# 1. Set order for first part action
;##############################################################

;--- order after loading part in hobbing station
if (_lastAction == _autoLoadToHobStation)
    ;-- Prompt user with 2 choices: Start hobbing, Complete FPC Process (old: Prompt user with 2 choices: Hob first gear, Complete FPC Process)
    Prompt(mComPrompt_StartHobbing, _response)
    if _response == mComPrompt_StartHobbing
         _order = _clampAndHobCut
    endif
    if _response == mComPrompt_CompleteFirstPart
        ;-- Prompt User: Send to Not OK and restart, Exit FPC Process
        Prompt(mComPrompt_SendToNotOK, _response)
        if _response == mComPrompt_SendToNotOK
            _order = _sendToNotOK
        endif
        if _response == mComPrompt_ExitFirstPart
            _order = _exitFirstPart
        endif
    endif
endif

;--- order after loading part in APC station
if (_lastAction == _autoLoadToApcStation)
    ;-- Prompt user with 2 choices: Start Chamfering, Complete FPC Process (old: Prompt user "Press OK to Start APC Process)
    Prompt(mComPrompt_StartChamfering, _response)
    if _response == mComPrompt_StartChamfering
         _order = _clampAndApcCut
    endif
    if _response == mComPrompt_CompleteFirstPart
        ;-- Prompt User: Send to Not OK and restart, Exit FPC Process
        Prompt(mComPrompt_SendToNotOK, _response)
        if _response == mComPrompt_SendToNotOK
            _order = _sendToNotOK
        endif
        if _response == mComPrompt_ExitFirstPart
            _order = _exitFirstPart
        endif
    endif
endif

;--- order after hobbing cut
if (_lastAction == _clampAndHobCut) or (_lastAction == _repeatHobCut)  or (_lastAction == _nextHobCut)
    ;-- Prompt user with 3 choices: Repeat Hobbing#/Chamfering#, Continue, Complete FPC Process
    DocketGetSequenceSelect(_stationHob, _job, _countSelected, _startSelected, _endSelected, _startNotSelected, _endNotSelected)
    PromptToMeasureFp(gComJobSequenceName[_job, _endSelected], _response)
    if _response == mComPrompt_Repeat
        _order = _repeatHobCut
    endif
    if _response == mComPrompt_Continue
        _cutsDone = ((_endSelected - _startSelected + 1) == _countSelected)
        if _cutsDone
            ;--- gets the used station
            DocketGetUsedStation(_stationIsUsed)
            if _stationIsUsed[_stationApc]
                _order = _unclampPartInHobStation
            else
                ;-- Prompt user with 3 choices: Begin Production, Send to SPC, Exit FPC Process
                Prompt(mComPrompt_SendToSpc, _response)
                if _response == mComPrompt_SendToSpc
                    _order = _sendToSpc
                endif
                if _response == mComPrompt_BeginProduction
                    _order = _beginProduction
                endif
                if _response == mComPrompt_ExitFirstPart
                    _order = _exitFirstPart
                endif
            endif
        else
            _order = _nextHobCut
        endif
    endif
    if _response == mComPrompt_CompleteFirstPart
        ;-- Prompt User: Send to Not OK and restart, Exit FPC Process
        Prompt(mComPrompt_SendToNotOK, _response)
        if _response == mComPrompt_SendToNotOK
            _order = _sendToNotOK
        endif
        if _response == mComPrompt_ExitFirstPart
            _order = _exitFirstPart
        endif
    endif
endif

;--- order after Apc cut
if (_lastAction == _clampAndApcCut) or (_lastAction == _repeatApcCut) or (_lastAction == _nextApcCut)
    ;-- Prompt user with 3 choices: Repeat Hobbing#/Chamfering#, Continue, Complete FPC Process
    DocketGetSequenceSelect(_stationApc, _job, _countSelected, _startSelected, _endSelected, _startNotSelected, _endNotSelected)
    PromptToMeasureFp(gComJobSequenceName[_job, _endSelected], _response)
    if _response == mComPrompt_Repeat
        _order = _repeatApcCut
    endif
    if _response == mComPrompt_Continue
        _cutsDone = ((_endSelected - _startSelected + 1) == _countSelected)
        if _cutsDone
            ;-- Prompt user with 3 choices: Begin Production, Send to SPC, Exit FPC Process
            Prompt(mComPrompt_SendToSpc, _response)
            if _response == mComPrompt_SendToSpc
                _order = _sendToSpc
            endif
            if _response == mComPrompt_BeginProduction
                _order = _beginProduction
            endif
            if _response == mComPrompt_ExitFirstPart
                _order = _exitFirstPart
            endif
        else
            _order = _nextApcCut
        endif
    endif
    if _response == mComPrompt_CompleteFirstPart
        ;-- Prompt User: Send to Not OK and restart, Exit FPC Process
        Prompt(mComPrompt_SendToNotOK, _response)
        if _response == mComPrompt_SendToNotOK
            _order = _sendToNotOK
        endif
        if _response == mComPrompt_ExitFirstPart
            _order = _exitFirstPart
        endif
    endif
endif

;--- order after part in hobbing station is prepared for loading in other station
if (_lastAction == _unclampPartInHobStation)
    _order = _autoLoadToApcStation
    _reset = true
endif

;--- order start unclamp to prepared for loading in other station
if (_lastAction == _previousUnclampFirstStation)
    _order = _previousUnclampLastStation
    _reset = true
endif

;--- order after send to SPC or send to Not Ok tray
if (_lastAction == _sendToSpc) and gComWarmupIsActive
    _warmupCycle = _mWarmupStartCycle
    _order = _startWarmUp
    _reset = true
endif

;--- order after send to SPC or send to Not Ok tray
if ((_lastAction == _sendToSpc) and not(gComWarmupIsActive)) or (_lastAction == _startWarmUp)
    ;-- Prompt user with 3 choices: Begin Production, Restart FPC, Exit FPC Process
    Prompt(mComPrompt_RestartFirstPart, _response)
    if _response == mComPrompt_BeginProduction
        _order = _beginProduction
    endif
    if _response == mComPrompt_RestartFirstPart
        _restart = true
    endif
    if _response == mComPrompt_ExitFirstPart
        _order = _exitFirstPart
    endif
    if (_lastAction == _startWarmUp)
        _warmupCycle = _mWarmupEndCycle
    endif
    _reset = true
endif

;--- order after send to SPC or send to Not Ok tray
if (_lastAction == _sendToNotOK)
    _order = _exitFirstPart
    _reset = true
endif

;--- set restart order
if pStart or _restart or (_lastAction == _previousUnclampApcStation) or (_lastAction == _previousUnclampHobStation) or (_lastAction == _previousUnclampLastStation)

    ;--- set the order to saved start order
    _order = gComInCycleFpStartOrder

    if (pStart or _restart)

        ;--- gets the used station
        DocketGetUsedStation(_stationIsUsed)
        DocketGetJobState4(gComStationJobPointer[_stationHob], _noJob, _jobEmpty, _unmachinedInHobStation, _jobFinished, _hobbedInHobStation, _unchamferedInHobStation, _jobChamfered)
        DocketGetJobState4(gComStationJobPointer[_stationApc], _noJob, _jobEmpty, _unmachinedInApcStation, _jobFinished, _hobbedInApcStation, _unchamferedInApcStation, _jobChamfered)

        ;--- set order to station for first process
        if _stationIsUsed[_stationHob]
            gComInCycleFpStartOrder = _autoLoadToHobStation
        else
            if _stationIsUsed[_stationApc]
                gComInCycleFpStartOrder = _autoLoadToApcStation
            endif
        endif

        if _stationIsUsed[_stationHob] and _stationIsUsed[_stationApc] and not(gComFpJobChangeRequest or tgHobFpToolChangeRequest)
            if (_hobbedInApcStation and _unchamferedInApcStation)  or (_hobbedInHobStation and _unchamferedInHobStation)
                ;-- Prompt user with 2 choices, Only run APC FPC process, Run entire FPC process
                Prompt(mComPrompt_EntireFirstPart, _response)
                if _response == mComPrompt_EntireFirstPart
                    gComInCycleFpStartOrder = _autoLoadToHobStation
                endif
                if (_response == mComPrompt_OnlyChamfering)
                    gComInCycleFpStartOrder = _autoLoadToApcStation
                endif
            endif
        endif

        ;--- set the order to the start order
        _order = gComInCycleFpStartOrder

        ;--- overwrite the order if new part needed -> do unclamp of Hobbing and/or Apc station first
        _newPartToHobStation = (gComInCycleFpStartOrder == _autoLoadToHobStation) and not(_unmachinedInHobStation)
        _newPartToApcStation = (gComInCycleFpStartOrder == _autoLoadToApcStation) and not(_hobbedInApcStation and _unchamferedInApcStation)
        if _newPartToHobStation or _newPartToApcStation
            _order = _previousUnclampFirstStation
        else
            if (gComInCycleFpStartOrder == _autoLoadToHobStation) and not(tmApc_Dprb_c_GripperLiftTop)
                _order = _previousUnclampApcStation
            endif
            if (gComInCycleFpStartOrder == _autoLoadToApcStation) and not(tmHob_Dprb_c_GripperLiftTop)
                _order = _previousUnclampHobStation
            endif
        endif

    endif

    pStart = false
    _restart = false
    _reset = true
    gComFpSelectedStation = mComStationEmpty

endif

if (_order == _empty) gotof __ErrorMissingOrder

;##############################################################
;# 2. Trigger the first part action by setting the related GUDs
;##############################################################

_actionCount = 0

;--- set start conditions
if _reset
    gComJobOnlySelectedSequences  = true
    gComFpSelectedAutoLoad[0]     = rep(false)
    gComFpSelectedClamp[0]        = rep(false)
    gComJobSequenceSelected[0,0]  = rep(false)
    gComJobSelectedTemplate[0]    = rep(false)
    gComFpSelectedUnclamp[0]      = rep(false)
    gComFpSelectedAutoUnload[0]   = rep(false)
    FirstPartResetStates
endif

;--- update localization of the station with first parts
gComFpStateLocatedStation = gComFpSelectedStation

;--- trace oder and located station
if _debugMode
    write(_fileError, _oderListFileName, "_order = "<<_order<<", gComFpStateLocatedStation = "<<gComFpStateLocatedStation)
endif

;--- Auto load to hob station
if (_order == _autoLoadToHobStation)
    ; set selected to state
    gComFpSelectedStation = _stationHob
    gComFpSelectedAutoLoad[gComFpSelectedStation] = true
    _actionCount = _actionCount + 1
endif

;--- Auto load to APC station
if (_order == _autoLoadToApcStation)
    gComFpSelectedStation = _stationApc
    gComFpSelectedAutoLoad[gComFpSelectedStation] = true
    _actionCount = _actionCount + 1
endif

;--- Unclamp in Hobbing station
if (_order == _unclampPartInHobStation) or (_order == _previousUnclampHobStation) or (_order == _previousUnclampFirstStation)
    gComFpSelectedStation = _stationHob
    gComFpSelectedUnclamp[gComFpSelectedStation] = true
    _actionCount = _actionCount + 1
endif

;--- Unclamp in Apc station
if (_order == _unclampPartInApcStation) or (_order == _previousUnclampApcStation) or (_order == _previousUnclampLastStation)
    gComFpSelectedStation = _stationApc
    gComFpSelectedUnclamp[gComFpSelectedStation] = true
    _actionCount = _actionCount + 1
endif

;--- Clamp and Hobbing cut
if (_order == _clampAndHobCut)
    gComFpSelectedStation = _stationHob
    gComFpSelectedClamp[gComFpSelectedStation] = true
    for _seq=0 to (mComJobSequenceCount-1)
        gComJobSequenceSelected[gComStationJobPointer[gComFpSelectedStation], _seq]  = (gComJobSequenceState[gComStationJobPointer[gComFpSelectedStation], _seq] == 100)
    endfor
    DocketGetSequenceSelect(gComFpSelectedStation, _job, _countSelected, _startSelected, _endSelected, _startNotSelected, _endNotSelected)
    gComJobSequenceSelected[gComStationJobPointer[gComFpSelectedStation], maxval(_endSelected, _startNotSelected)] = true
    _actionCount = _actionCount + 1
endif

;--- Repeat Hobbing cut
if (_order == _repeatHobCut)
    gComFpSelectedStation = _stationHob
    DocketGetSequenceSelect(gComFpSelectedStation, _job, _countSelected, _startSelected, _endSelected, _startNotSelected, _endNotSelected)
    gComJobSequenceState[gComStationJobPointer[gComFpSelectedStation], _endSelected] = false
    _actionCount = _actionCount + 1
endif

;--- Clamp and Hobbing cut
if (_order == _nextHobCut)
    gComFpSelectedStation = _stationHob
    DocketGetSequenceSelect(gComFpSelectedStation, _job, _countSelected, _startSelected, _endSelected, _startNotSelected, _endNotSelected)
    gComJobSequenceSelected[gComStationJobPointer[gComFpSelectedStation], _startNotSelected] = true
    _actionCount = _actionCount + 1
endif

;--- Clamp and Apc cut
if (_order == _clampAndApcCut)
    gComFpSelectedStation = _stationApc
    gComFpSelectedClamp[gComFpSelectedStation]  = true
    for _seq=0 to (mComJobSequenceCount-1)
        gComJobSequenceSelected[gComStationJobPointer[gComFpSelectedStation], _seq]  = (gComJobSequenceState[gComStationJobPointer[gComFpSelectedStation], _seq] == 100)
    endfor
    DocketGetSequenceSelect(gComFpSelectedStation, _job, _countSelected, _startSelected, _endSelected, _startNotSelected, _endNotSelected)
    gComJobSequenceSelected[gComStationJobPointer[gComFpSelectedStation], maxval(_endSelected, _startNotSelected)] = true
    _actionCount = _actionCount + 1
endif

;--- Clamp and Hobbing cut
if (_order == _repeatApcCut)
    gComFpSelectedStation = _stationApc
    DocketGetSequenceSelect(gComFpSelectedStation, _job, _countSelected, _startSelected, _endSelected, _startNotSelected, _endNotSelected)
    gComJobSequenceState[gComStationJobPointer[gComFpSelectedStation], _endSelected] = false
    _actionCount = _actionCount + 1
endif

;--- Clamp and Apc cut
if (_order == _nextApcCut)
    gComFpSelectedStation = _stationApc
    DocketGetSequenceSelect(gComFpSelectedStation, _job, _countSelected, _startSelected, _endSelected, _startNotSelected, _endNotSelected)
    gComJobSequenceSelected[gComStationJobPointer[gComFpSelectedStation], _startNotSelected] = true
    _actionCount = _actionCount + 1
endif

;--- Send to SPC tray
if (_order == _sendToSpc)
    gComJobCycle[gComStationJobPointer[gComFpSelectedStation]] = mComJobCycleSpcPart
    gComFpSelectedUnclamp[gComFpSelectedStation] = true
    gComFpSelectedAutoUnload[gComFpSelectedStation] = true
    _actionCount = _actionCount + 1
endif

;--- Send to Not Ok tray
if (_order == _sendToNotOK)
    gComJobCycle[gComStationJobPointer[gComFpSelectedStation]] = mComJobCycleNotOkPart
    gComFpSelectedUnclamp[gComFpSelectedStation] = true
    gComFpSelectedAutoUnload[gComFpSelectedStation] = true
    _actionCount = _actionCount + 1
endif

;--- Start warmup cycle
if (_order == _startWarmUp)
    ; nothing to do
    _actionCount = _actionCount + 1
endif

;--- Deactivate in cycle firstpart and begin production
if _order == _beginProduction
    gComWorkflowUsed = gComGenWorkflow
    gComJobOnlySelectedSequences = false
    gComInCycleFpActive = false
    tgHobFpToolChangeRequest = false
    tgApcFpToolChangeRequest = false
    tgDbrFpToolChangeRequest = false
    gComFpJobChangeRequest = false
    _actionCount = _actionCount + 1
endif

;--- Send to Not Ok tray
if (_order == _exitFirstPart)
    gComWorkflowUsed = _noWorkflow
    gComJobOnlySelectedSequences = false
    gComInCycleFpActive = false
    _actionCount = _actionCount + 1
endif

if (_actionCount == 0) gotof __ErrorNoAction
if (_actionCount > 1) gotof __ErrorMultipleActions

;--- store data ---
gComInCycleFpLastAction = _order

;--- handle warm up
gComInCycleFpWarmupCycle = _warmupCycle

ret

;(#* Error handling ****************************************
__ErrorMissingOrder:
   _error = "Missing order!"  << " _lastAction=" << _lastAction <<  " gComPromptRequest=" << gComPromptRequest << " _response=" << _response
   gotof __Error

__ErrorNoAction:
   _error = "No Action!"
   gotof __Error

__ErrorMultipleActions:
   _error = "More as one action not allowed!"
   gotof __Error

__Error:
    while (true)
        msg($P_PROG[$P_STACK] << ": [Debug]: " << _error)
        M0
    endwhile

ret

endproc
;(#! @}
