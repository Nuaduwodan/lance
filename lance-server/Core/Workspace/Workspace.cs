using LanceServer.Core.Configuration;
using LanceServer.Core.SymbolTable;
using LanceServer.Parser;
using System.Linq;

namespace LanceServer.Core.Workspace
{
    public class Workspace
    {
        /// <summary>
        /// Provides the interface to the parser generated by antlr
        /// </summary>
        private ParserManager _parserManager;
        private readonly ConfigurationManager _configurationManager;

        private IEnumerable<Uri> _workspaceFolders;
        
        private Dictionary<Uri, Document> _documents = new();
        private Dictionary<string, ISymbol> _globalSymbols = new();

        public Workspace(ParserManager parserManager, ConfigurationManager configurationManager, IEnumerable<Uri> workspaceFolders)
        {
            _parserManager = parserManager;
            _configurationManager = configurationManager;
            _workspaceFolders = workspaceFolders;
        }

        /// <summary>
        /// Returns the document with a parse tree and symbol table from memory or creates it.
        /// </summary>
        /// <param name="uri"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public Document GetDocumentWithUpdatedSymbolTable(Uri uri)
        {
            var config = _configurationManager.SymbolTableConfiguration;
            
            var document = GetDocumentWithParseTree(uri);
            if (document.State >= DocumentState.Visited)
            {
                return document;
            }
            
            if (document.State != DocumentState.Parsed)
            {
                throw new ArgumentException();
            }

            var symbolTable = _parserManager.GetSymbolTableForDocument(document);
            
            //update symbol table
            DeleteGlobalSymbolsOfFile(document.Uri);
            document.DeleteAllSymbols();
            
            foreach (var symbol in symbolTable)
            {
                AddSymbol(symbol, config);
            }

            document.SetVisited();

            return document;
        }

        /// <summary>
        /// Returns the document with a parse tree from memory or creates it.
        /// </summary>
        /// <param name="uri">The URI of the document</param>
        public Document GetDocumentWithParseTree(Uri uri)
        {
            var document = GetDocument(uri);
            if (document.State >= DocumentState.Parsed)
            {
                return document;
            }
            
            if (document.State != DocumentState.Read)
            {
                throw new ArgumentException();
            }

            document.Tree = _parserManager.Parse(document);
            return document;
        }

        /// <summary>
        /// Returns the document from memory or creates it.
        /// </summary>
        /// <param name="uri">The URI of the document</param>
        public Document GetDocument(Uri uri)
        {
            if (HasDocument(uri))
            {
                return _documents[uri];
            }

            var document = FileIoHelper.ReadDocument(uri);
            _documents.Add(uri, document);
            return document;
        }

        /// <summary>
        /// Returns true if this workspace has a document with that URI.
        /// </summary>
        /// <param name="uri">The URI of the document</param>
        public bool HasDocument(Uri uri)
        {
            return _documents.ContainsKey(uri);
        }

        /// <summary>
        /// Adds the document to this workspace, returns true if successfully added or false if a document with that URI already exists.
        /// </summary>
        /// <param name="documentUri">The URI of the document</param>
        public bool AddDocument(Uri documentUri)
        {
            if (HasDocument(documentUri))
            {
                return false;
            }

            GetDocument(documentUri);
            return true;
        }

        public async Task InitWorkspaceAsync()
        {
            await Task.Run(InitWorkspace);
        }

        public void InitWorkspace()
        {
            var symbolTableConfig = _configurationManager.SymbolTableConfiguration;
            var fileEndingConfig = _configurationManager.FileEndingConfiguration;
            
            var documentUris = new List<Uri>();
            foreach (var workspaceFolder in _workspaceFolders)
            {
                foreach (var fileEnding in fileEndingConfig.FileEndings)
                {
                    documentUris.AddRange(FileIoHelper.GetFilesInDirectory(workspaceFolder, "*"+fileEnding));
                }
            }

            var defFiles = documentUris.Where(uri => symbolTableConfig.GlobalFileEndings.Contains(Path.GetExtension(uri.AbsolutePath)));
            documentUris = documentUris.Except(defFiles).ToList();
            
            foreach (var defFile in defFiles)
            {
                GetDocumentWithParseTree(defFile);
            }
            
            var globalFiles = documentUris.Where(uri => symbolTableConfig.GlobalDirectories.Intersect(Path.GetDirectoryName(uri.AbsolutePath)!.Split(Path.DirectorySeparatorChar)).Any());
            documentUris = documentUris.Except(globalFiles).ToList();
            
            foreach (var globalFile in globalFiles)
            {
                GetDocumentWithParseTree(globalFile);
            }
            
            foreach (var documentUri in documentUris)
            {
                GetDocumentWithParseTree(documentUri);
            }
        }

        /// <summary>
        /// Returns the symbol.
        /// </summary>
        /// <param name="symbolName">The name of the symbol</param>
        /// <param name="documentOfReference">The URI of the document where the symbol is used</param>
        public ISymbol GetSymbol(string symbolName, Uri documentOfReference)
        {
            var symbol = GetDocument(documentOfReference).GetSymbol(symbolName);

            if (symbol is not null)
            {
                return symbol;
            }
            
            symbol = _globalSymbols[symbolName];
            
            if (symbol is not null)
            {
                return symbol;
            }

            return new ErrorSymbol($"Cannot resolve symbol '{symbolName}'");
        }

        private void AddSymbol(ISymbol symbol, SymbolTableConfiguration config)
        {
            if (IsGlobalSymbol(symbol.SourceDocument, config))
            {
                _globalSymbols.Add(symbol.Identifier, symbol);
            }
            else
            {
                GetDocument(symbol.SourceDocument).AddSymbol(symbol);
            }
        }

        private bool IsGlobalSymbol(Uri sourceDocument, SymbolTableConfiguration config)
        {
            var fileEnding = Path.GetExtension(sourceDocument.AbsolutePath);

            if (config.GlobalFileEndings.Contains(fileEnding))
            {
                return true;
            }

            var directories = Path.GetDirectoryName(sourceDocument.AbsolutePath)!.Split(Path.DirectorySeparatorChar);

            if (config.GlobalDirectories.Intersect(directories).Any())
            {
                return true;
            }
            
            return false;
        }

        private void DeleteGlobalSymbolsOfFile(Uri documentUri)
        {
            _globalSymbols = _globalSymbols.Where(pair => pair.Value.SourceDocument != documentUri).ToDictionary(pair => pair.Key, pair => pair.Value);
            
        }
    }
}